{"ast":null,"code":"import * as Yup from \"yup\";\nconst employeeSchemas = [\n// Step 0: Employee Details\nYup.object().shape({\n  salutation: Yup.string().required(\"Salutation is required\"),\n  firstName: Yup.string().required(\"First name is required\"),\n  middleName: Yup.string().required(\"Middle name is required\"),\n  lastName: Yup.string().required(\"Last name is required\"),\n  gender: Yup.string().required(\"Gender is required\"),\n  dob: Yup.string().required(\"Date of Birth is required\"),\n  nationality: Yup.string().required(\"Nationality is required\")\n}),\n// Step 1: Contact Details\nYup.object().shape({\n  contactNumber: Yup.string().required(\"Contact number is required\").matches(/^\\d{10}$/, \"Must be 10 digits\"),\n  email: Yup.string().required(\"Email is required\").email(\"Invalid email address\")\n}),\n// Step 2: Other Details\nYup.object().shape({\n  relationType: Yup.string().required(\"Relation type is required\"),\n  relationName: Yup.string().required(\"Relation name is required\"),\n  altNumber: Yup.string().nullable().matches(/^\\d{10}$/, \"Must be 10 digits\").notRequired(),\n  altNumberType: Yup.string().required(\"Alternative number type is required\")\n}),\n// Step 3: Address\nYup.object().shape({\n  country: Yup.string().required(\"Country is required\"),\n  state: Yup.string().required(\"State is required\"),\n  district: Yup.string().required(\"District is required\"),\n  block: Yup.string().required(\"Block (mandal) is required\"),\n  village: Yup.string().required(\"Village is required\"),\n  zipcode: Yup.string().required(\"Zipcode is required\").matches(/^\\d{6}$/, \"Zipcode must be 6 digits\")\n}),\n// Step 4: Professional Details\nYup.object().shape({\n  education: Yup.string().required(\"Education is required\"),\n  experience: Yup.string().required(\"Experience is required\").matches(/^\\d+$/, \"Experience must be a number in years\")\n}),\n// Step 5: Bank Details\nYup.object().shape({\n  bankName: Yup.string().required(\"Bank name is required\"),\n  accountNumber: Yup.string().required(\"Account number is required\").matches(/^\\d+$/, \"Only digits allowed\"),\n  branchName: Yup.string().required(\"Branch name is required\"),\n  ifscCode: Yup.string().required(\"IFSC code is required\").matches(/^[A-Z]{4}0[A-Z0-9]{6}$/, \"Invalid IFSC code\")\n}),\n// Step 6: Documents\nYup.object().shape({\n  documentType: Yup.string().required(\"Document Type is required\"),\n  documentNumber: Yup.string().when(\"documentType\", {\n    is: val => val && val !== \"ppbNumber\",\n    then: schema => schema.required(\"Document number is required\"),\n    otherwise: schema => schema.notRequired()\n  })\n}),\n// Step 7: Portal Access\nYup.object().shape({\n  role: Yup.string().required(\"Role is required\"),\n  accessStatus: Yup.string().required(\"Access status is required\")\n})];\nexport default employeeSchemas;","map":{"version":3,"names":["Yup","employeeSchemas","object","shape","salutation","string","required","firstName","middleName","lastName","gender","dob","nationality","contactNumber","matches","email","relationType","relationName","altNumber","nullable","notRequired","altNumberType","country","state","district","block","village","zipcode","education","experience","bankName","accountNumber","branchName","ifscCode","documentType","documentNumber","when","is","val","then","schema","otherwise","role","accessStatus"],"sources":["D:/fullstac/Working-frontend/src/validations/employeeSchemas.jsx"],"sourcesContent":["import * as Yup from \"yup\";\r\n\r\nconst employeeSchemas = [\r\n  // Step 0: Employee Details\r\n  Yup.object().shape({\r\n    salutation: Yup.string().required(\"Salutation is required\"),\r\n    firstName: Yup.string().required(\"First name is required\"),\r\n    middleName: Yup.string().required(\"Middle name is required\"),\r\n    lastName: Yup.string().required(\"Last name is required\"),\r\n    gender: Yup.string().required(\"Gender is required\"),\r\n    dob: Yup.string().required(\"Date of Birth is required\"),\r\n    nationality: Yup.string().required(\"Nationality is required\"),\r\n  }),\r\n\r\n  // Step 1: Contact Details\r\n  Yup.object().shape({\r\n    contactNumber: Yup.string()\r\n      .required(\"Contact number is required\")\r\n      .matches(/^\\d{10}$/, \"Must be 10 digits\"),\r\n    email: Yup.string()\r\n      .required(\"Email is required\")\r\n      .email(\"Invalid email address\"),\r\n  }),\r\n\r\n  // Step 2: Other Details\r\n  Yup.object().shape({\r\n    relationType: Yup.string().required(\"Relation type is required\"),\r\n    relationName: Yup.string().required(\"Relation name is required\"),\r\n    altNumber: Yup.string()\r\n      .nullable()\r\n      .matches(/^\\d{10}$/, \"Must be 10 digits\")\r\n      .notRequired(),\r\n    altNumberType: Yup.string().required(\"Alternative number type is required\"),\r\n  }),\r\n\r\n  // Step 3: Address\r\n  Yup.object().shape({\r\n    country: Yup.string().required(\"Country is required\"),\r\n    state: Yup.string().required(\"State is required\"),\r\n    district: Yup.string().required(\"District is required\"),\r\n    block: Yup.string().required(\"Block (mandal) is required\"),\r\n    village: Yup.string().required(\"Village is required\"),\r\n    zipcode: Yup.string()\r\n      .required(\"Zipcode is required\")\r\n      .matches(/^\\d{6}$/, \"Zipcode must be 6 digits\"),\r\n  }),\r\n\r\n  // Step 4: Professional Details\r\n  Yup.object().shape({\r\n    education: Yup.string().required(\"Education is required\"),\r\n    experience: Yup.string()\r\n      .required(\"Experience is required\")\r\n      .matches(/^\\d+$/, \"Experience must be a number in years\"),\r\n  }),\r\n\r\n  // Step 5: Bank Details\r\n  Yup.object().shape({\r\n    bankName: Yup.string().required(\"Bank name is required\"),\r\n    accountNumber: Yup.string()\r\n      .required(\"Account number is required\")\r\n      .matches(/^\\d+$/, \"Only digits allowed\"),\r\n    branchName: Yup.string().required(\"Branch name is required\"),\r\n    ifscCode: Yup.string()\r\n      .required(\"IFSC code is required\")\r\n      .matches(/^[A-Z]{4}0[A-Z0-9]{6}$/, \"Invalid IFSC code\"),\r\n  }),\r\n\r\n  // Step 6: Documents\r\n  Yup.object().shape({\r\n    documentType: Yup.string().required(\"Document Type is required\"),\r\n    documentNumber: Yup.string().when(\"documentType\", {\r\n      is: (val) => val && val !== \"ppbNumber\",\r\n      then: (schema) => schema.required(\"Document number is required\"),\r\n      otherwise: (schema) => schema.notRequired(),\r\n    }),\r\n  }),\r\n\r\n  // Step 7: Portal Access\r\n  Yup.object().shape({\r\n    role: Yup.string().required(\"Role is required\"),\r\n    accessStatus: Yup.string().required(\"Access status is required\"),\r\n  }),\r\n];\r\n\r\nexport default employeeSchemas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}